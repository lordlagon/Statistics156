@page "/solicitacoes"
@using Statistics156_Front.Data;
@inject Statistics156_Front.Services.ISelecoesService _selecaoService
@inject Statistics156_Front.Services.ICentralService _centralService
@inject NotificationService _notificationService
@inject IJSRuntime jsRunTime;

<div class="container-fluid" style="border: 0px solid red">
    <div class="row col-12" style="border: 0px solid blue; padding: 10px">
        <div class="col col-9 padding: 10px ">
            <h1 style="font-weight: bold">Solicitações por Bairro</h1>
        </div>
    </div>
    <div class="row col-12" style="border: 0px solid blue; padding: 10px">
        <div class="col col-9 padding: 10px ">
            <h4>Quantidade de solicitações do mês por bairro </h4>
            <div id="chartdiv" style="border: 0px solid red;"></div>
        </div>

        <div class="col col-3 padding: 10px">
            <h4>Selecione um assunto para modificar o gráfico</h4>
            <RadzenDropDown AllowClear="true" TValue="string" Style="width:300px"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowFiltering="true"
                            Placeholder="" Data=@assuntos TextProperty="Assunto" ValueProperty="Assunto"
                            Change=@(args => OnChangeAssunto(args, "assunto")) />

            <h4 style="font-weight: bold">Mês</h4>
            <RadzenDropDown AllowClear="true" TValue="string" Style="width:300px"
                            Data=@(meses.Select(c => c).Distinct())
                            Change=@(args => OnChange(args, "mes")) />
            <h4 style="font-weight: bold">Ano</h4>
            <RadzenDropDown AllowClear="true" TValue="string" Style="width:300px"
                            Data=@(anos.Select(c => c).Distinct())
                            Change=@(args => OnChange(args, "ano")) />
            <p>
                <button class="btn btn-primary" @onclick="Filtrar">Filtrar</button>
            </p>
        </div>
    </div>
</div>
@code{

    IEnumerable<string> meses;
    IEnumerable<string> anos;
    IEnumerable<AssuntoSolicitacao> assuntos;
    List<BairroPorAssunto> bairroPorAssunto;
    AssuntoSolicitacao assuntoSelecionado;

    string Mes = string.Empty;
    string Ano = string.Empty;
    string Titulo = string.Empty;
    string TituloFaixa = string.Empty;

    List<CountAno> analiseTipo = new List<CountAno>();

    protected override async Task OnInitializedAsync()
    {
        meses = _selecaoService.GetMeses();
        anos = _selecaoService.GetAnos();
        assuntos = _selecaoService.GetTop10Assuntos() ?? new List<AssuntoSolicitacao>();
        assuntoSelecionado = new AssuntoSolicitacao();
        bairroPorAssunto = new List<BairroPorAssunto>();
        GetSelecoes();
        await base.OnInitializedAsync();
    }

    async Task GenerateChartBlazor()
    {
        await jsRunTime.InvokeVoidAsync("GenerateColumnChart", bairroPorAssunto);
    }

    async Task GetAnalisesIniciais()
    {
        await Task.Run(async () => await QuantidadeSolicitacaoPorBairro(assuntoSelecionado.Fk_Assunto).ConfigureAwait(false));
    }

    void GetSelecoes()
    {
        //assuntos = await _selecaoService.GetAssuntosAsync() ?? new List<AssuntoSolicitacao>();
        meses = _selecaoService.GetMeses();
        anos = _selecaoService.GetAnos();
        assuntoSelecionado = assuntos.FirstOrDefault(f => f.Fk_Assunto == "67");
        Mes = meses.FirstOrDefault(f => f.Contains("Set"));
        Ano = anos.FirstOrDefault(f => f.Contains("2021"));
    }

    async Task Filtrar()
    {
        bairroPorAssunto.Clear();
        if (!string.IsNullOrEmpty(assuntoSelecionado.Assunto))
        {
            Task.WaitAll(Task.Run(async () => await QuantidadeSolicitacaoPorBairro(assuntoSelecionado.Fk_Assunto).ConfigureAwait(false)));
        }
        await GenerateChartBlazor();
    }

    async Task QuantidadeSolicitacaoPorBairro(string assunto)
    {
        bairroPorAssunto = await _centralService.QuantidadeSolicitacaoPorBairro(assunto, Mes, Ano);
    }
    void OnChangeAssunto(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        assuntoSelecionado = assuntos.AsQueryable().Where(c => c.Assunto == str as string).FirstOrDefault();
    }

    void OnChange(object value, string name)
    {

        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        if (str is string valor)
        {
            switch (name)
            {
                case "ano":
                    Ano = valor;
                    break;
                case "mes":
                    Mes = valor;
                    break;
                default:
                    break;
            }

        }
    }
}
